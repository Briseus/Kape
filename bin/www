#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app =  require('../app')
const debug = require('debug')('kape:server')
const http = require('http')
const winston = require('winston')

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Setup socket.io
 */
const channels = ['general']

const io = require('socket.io')(server)

io.on('connection', (socket) => {

  winston.info('a user connected')

  socket.on('disconnect', () => {
    socket.to(socket.room).emit('announcement', socket.user + " left channel")
    winston.info('a user disconnected')
  })

  /**
   *  Creates a new channel
   */
  socket.on('createChannel', (channel) => {
    channels.push(channel)
    // update all with updated channel list
    io.sockets.emit('channels', channels)
  })

  /**
   * Join channel when emitting here
   */
  socket.on('joinChannel', (user, channel) => {
    socket.room = channel
    socket.user = user
    socket.join(channel)
    winston.info(socket.user + " joined channel")
    socket.to(channel).emit('announcement', socket.user + " joined channel")
  })

  /**
   * Forwards messages
   */
  socket.on('message', (from, message, channel) => {
    winston.info("Got msg " + message + " from " + from + " in " + channel)
    socket.to(channel).emit('message', from, message, channel)
  })

  /**
   * If called return all current channels
   */
  socket.on('channels', () => {
    socket.emit('channels', channels)
  })

})

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {

  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      winston.error(bind + ' requires elevated privileges')
      process.exit(1)
      break;
    case 'EADDRINUSE':
      winston.error(bind + ' is already in use')
      process.exit(1)
      break;
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
